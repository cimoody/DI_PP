#  gw_begin_date   -- Field water-level measurements begin date
#  gw_end_date     -- Field water-level measurements end date
#  gw_count_nu     -- Field water-level measurements count
#  sv_begin_date   -- Site-visit data begin date
#  sv_end_date     -- Site-visit data end date
#  sv_count_nu     -- Site-visit data count
#
#
# query started 2015-07-17 22:14:18 EDT
#
# there are 1188 sites matching the search criteria.
#
#
char_COSurfaceH2O <- COSurfaceH2O[1,]; # Character information for each column. Saving and removing.
# agency_cd site_no station_nm site_tp_cd lat_va long_va dec_lat_va dec_long_va coord_meth_cd
# 1        5s     15s        50s         7s    11s     12s        16n         16n            1s
# coord_acy_cd coord_datum_cd dec_coord_datum_cd district_cd state_cd county_cd country_cd
# 1           1s            10s                10s          3s       2s        3s         2s
# land_net_ds map_nm map_scale_fc alt_va alt_meth_cd alt_acy_va alt_datum_cd huc_cd basin_cd
# 1         23s    20s           7s     8s          1s         3s          10s    16s       2s
# topo_cd data_types_cd instruments_cd construction_dt inventory_dt drain_area_va
# 1      1s           30s            30s              8s           8s            8s
# contrib_drain_area_va tz_cd local_time_fg reliability_cd gw_file_cd nat_aqfr_cd aqfr_cd
# 1                    8s    6s            1s             1s        30s         10s      8s
# aqfr_type_cd well_depth_va hole_depth_va depth_src_cd project_no rt_bol peak_begin_date
# 1           1s            8s            8s           1s        12s     3n             10d
# peak_end_date peak_count_nu qw_begin_date qw_end_date qw_count_nu gw_begin_date gw_end_date
# 1           10d            8n           10d         10d          8n           10d         10d
# gw_count_nu sv_begin_date sv_end_date sv_count_nu peak_end_date2 peak_begin_date2
# 1          8n           10d         10d          8n           <NA>             <NA>
COSurfaceH2O <- COSurfaceH2O[2:1189,]; # Removing first row
COPrecip_DenverArapahoe$DATE <- strptime(COPrecip_DenverArapahoe$DATE , "%Y%m%d %H:%M");
COPrecip_NEARBY$DATE <- strptime(COPrecip_NEARBY$DATE , "%Y%m%d %H:%M");
COPrecip_DenverArapahoe$LATITUDE_NO   <- as.numeric(COPrecip_DenverArapahoe$LATITUDE);
COPrecip_DenverArapahoe$LONGITUDE_NO  <- as.numeric(COPrecip_DenverArapahoe$LONGITUDE);
COPrecip_NEARBY$LONGITUDE_NO  <- as.numeric(COPrecip_NEARBY$LONGITUDE);
COPrecip_NEARBY$LATITUDE_NO   <- as.numeric(COPrecip_NEARBY$LATITUDE);
COSurfaceH2O$LATITUDE_NO  <- as.numeric(COSurfaceH2O$dec_lat_va);
COSurfaceH2O$LONGITUDE_NO <- as.numeric(COSurfaceH2O$dec_long_va);
COPrecip_DenverArapahoe$LONG_LAT <- paste(COPrecip_DenverArapahoe$LONGITUDE,
COSurfaceH2O$LONG_LAT <- paste(COSurfaceH2O$dec_long_va, COSurfaceH2O$dec_lat_va, sep = "_");
COPrecip_DenverArapahoe$LATITUDE, sep = "_");
COPrecip_NEARBY$LONG_LAT <- paste(COPrecip_NEARBY$LONGITUDE,
COPrecip_NEARBY$LATITUDE, sep = "_");
# Removing unknown locations
COPrecip2_NEARBY <- COPrecip_NEARBY[!(COPrecip_NEARBY$LATITUDE=="unknown"),];
# Getting altitude in the same units for all tables
COSurfaceH2O$ALT_METERS <- 1200/3937 * as.numeric(COSurfaceH2O$alt_va); # Converting ft to m
COPrecip2_NEARBY$ALT_METERS <- as.numeric(COPrecip2_NEARBY$ELEVATION);
COPrecip_DenverArapahoe$ALT_METERS <- as.numeric(COPrecip_DenverArapahoe$ELEVATION);
# Saving data frames in R
save(COPrecip_DenverArapahoe, COPrecip2_NEARBY, COSurfaceH2O,
file = sprintf("%s%s", wDir, "InitialPrecipSurface.Rda"));
getPoints <- function(df) {
points <- strsplit(row.names(as.data.frame(table(df$LONG_LAT))), "_");
}
p22 <- getPoints(COPrecip2_NEARBY)
View(p22)
p22 < as.data.frame(table(COPrecip2_NEARBY$LONG_LAT))
p22 < (table(COPrecip2_NEARBY$LONG_LAT))
View(p22)
p22 < table(COPrecip2_NEARBY$LONG_LAT)
View(p22)
t22 <- table(COPrecip2_NEARBY$LONG_LAT)
View(t22)
p22 <- table(COPrecip2_NEARBY$LONG_LAT)
View(p22)
p22 <- as.data.frame(p22)
View(p22)
getPoints <- function(df) {
tdf <- table(df$LONG_LAT);
tdf <- as.data.frame(tdf);
points <- strsplit(row.names(tdf$Var1), "_");
}
p23 <- getPoints(COPrecip2_NEARBY)
class(p22$Var1)
getPoints <- function(df) {
tdf <- table(df$LONG_LAT);
tdf <- as.data.frame(tdf);
points <- strsplit(as.character(tdf$Var1), "_");
}
p23 <- getPoints(COPrecip2_NEARBY)
View(p23)
df <- COPrecip2_NEARBY
wgs.84    <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0";
# ESRI:54009 world mollweide projection, units = meters
# see http://www.spatialreference.org/ref/esri/54009/
mollweide <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs";
sp.points <- SpatialPoints(df[df$Depth==0,c("LONGITUDE_NO","LATITUDE_NO")], proj4string=CRS(wgs.84));
points(sp.points,pch=20,col="red")
# WGS84 long/lat
wgs.84    <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0";
# ESRI:54009 world mollweide projection, units = meters
# see http://www.spatialreference.org/ref/esri/54009/
mollweide <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs";
sp.points <- SpatialPoints(df[,c("LONGITUDE_NO","LATITUDE_NO")], proj4string=CRS(wgs.84));
points(sp.points,pch=20,col="red")
# WGS84 long/lat
wgs.84    <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0";
# ESRI:54009 world mollweide projection, units = meters
# see http://www.spatialreference.org/ref/esri/54009/
mollweide <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs";
sp.points <- SpatialPoints(df[,c("LONGITUDE_NO","LATITUDE_NO")], proj4string=CRS(wgs.84));
plot(sp.points,pch=20,col="red")
wgs.84    <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0";
# ESRI:54009 world mollweide projection, units = meters
# see http://www.spatialreference.org/ref/esri/54009/
mollweide <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs";
PrecipD.points <- SpatialPoints(COPrecip_DenverArapahoe[, c("LONGITUDE_NO","LATITUDE_NO")],
proj4string = CRS(wgs.84));
PrecipN.points <- SpatialPoints(COPrecip2_NEARBY[, c("LONGITUDE_NO","LATITUDE_NO")],
proj4string = CRS(wgs.84));
Surf.points <- SpatialPoints(COSurfaceH2O[, c("LONGITUDE_NO","LATITUDE_NO")],
proj4string = CRS(wgs.84));
plot(Surf.points, pch = 20, col = "blue")
points(PrecipD.points, pch = 20, col = "red")
points(PrecipN.points, pch = 20, col = "gray")
?readOGR
USstates <- <- readOGR(dsn = sprintf("%s%s", dDir, "ne_10m_admin_1_states_provinces"),
layer = "ne_10m_admin_1_states_provinces", p4s = wgs.84);
USstates <- readOGR(dsn = sprintf("%s%s", dDir, "ne_10m_admin_1_states_provinces"),
layer = "ne_10m_admin_1_states_provinces", p4s = wgs.84);
USstates.moll <- spTransform(USstates, CRS(mollweide));
plot(USstates);
plot(Surf.points, pch = 20, col = "blue")
plot(USstates);
plot(USstates);
library(maptools);
install.packages("maptools");
library(maptools);
library(ggmap);
install.packages("ggmap");
library(ggmap);
install.packages("rworldmap");
library(rworldmap);
mapGriddedData(mapRegion="africa")
mapGriddedData(mapRegion="colorado")
getMap()$NAME
mapGriddedData(mapRegion="United States")
mapGriddedData(getMap()$NAME="United States")
mapGriddedData(getMap()$NAME=="United States")
mapGriddedData(mapRegion="us")
mapGriddedData(mapRegion="north america")
mapHalfDegreeGridToCountries()
mapHalfDegreeGridToCountries(mapCountryData("United States"))
mapHalfDegreeGridToCountries(mapCountryData())
mapHalfDegreeGridToCountries(mapCountryData("United States"))
mapHalfDegreeGridToCountries(mapCountryData(mapToPlot = "United States"))
plot(USstates);
plot(USstates, xlim = range(0,180));
plot(USstates, xlim = range(-110,-101));
plot(USstates, xlim = range(-110,-101), ylim = range(36, 42));
plot(USstates, xlim = range(-110,-101), ylim = range(36, 42));
points(Surf.points, pch = 20, col = "blue")
points(PrecipD.points, pch = 20, col = "red")
points(PrecipN.points, pch = 20, col = "cyan")
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41));
points(Surf.points, pch = 20, col = "blue")
points(PrecipD.points, pch = 20, col = "red")
points(PrecipN.points, pch = 20, col = "cyan")
points(Surf.points, pch = 2, col = "blue")
points(PrecipD.points, pch = 2, col = "red")
points(PrecipN.points, pch = 2, col = "cyan")
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41),
title("Colorado Surface Water and Precipitation"));
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41));
?plot
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)");
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)", title(main = "Colorado Surface Water & Precipitation"));
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)", title(main = "Colorado", sub = "Surface Water & Precipitation"));
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)", title(main = "Colorado", sub = "Surface Water & Precipitation"));
dev.off()
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)", title(main = "Colorado", sub = "Surface Water & Precipitation"));
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)");
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado", sub = "Surface Water & Precipitation");
points(Surf.points, pch = 2, col = "blue");
points(PrecipD.points, pch = 2, col = "red");
points(PrecipN.points, pch = 2, col = "cyan");
?pch
points(PrecipN.points, pch = 2, col = "dark green");
points(PrecipN.points, pch = 2, col = "orange");
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41),
xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado",
sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41),
xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado",
sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
dev.off()
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41),
xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado",
sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
dev.off()
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado", sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
points(Surf.points, pch = 2, col = "blue");
points(PrecipD.points, pch = 2, col = "red");
points(PrecipN.points, pch = 2, col = "orange");
svg("ColoradoPrecipitationSurfaceWater.svg", width = 14, height = 10);
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado", sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado", sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
svg("ColoradoPrecipitationSurfaceWater.svg", width = 14, height = 10);
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado", sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
points(Surf.points, pch = 2, col = "blue");
points(PrecipD.points, pch = 2, col = "red");
points(PrecipN.points, pch = 2, col = "orange");
dev.off();
dev.off()
dev.off()
svg("ColoradoPrecipitationSurfaceWater.svg", width = 14, height = 10);
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41), xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado", sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
points(Surf.points, pch = 2, col = "blue");
points(PrecipD.points, pch = 2, col = "red");
points(PrecipN.points, pch = 2, col = "orange");
dev.off();
order(t22)
t22[order(t22)]
t22 <- t22[order(t22)]
View(t22)
PrecipTime <- COPrecip_DenverArapahoe[ COPrecip_DenverArapahoe$LATITUDE=="39.7667"
& COPrecip_DenverArapahoe=="-104.88333",];
PrecipTime <- COPrecip_DenverArapahoe[ COPrecip_DenverArapahoe$LATITUDE=="39.7667"
& COPrecip_DenverArapahoe$LONGITUDE=="-104.88333",];
View(PrecipTime)
View(PrecipTime)
PrecipTime <- COPrecip_DenverArapahoe[ COPrecip_DenverArapahoe$LATITUDE_NO==39.7667
& COPrecip_DenverArapahoe$LONGITUDE_NO==-104.88333,];
View(PrecipTime)
View(PrecipTime)
PrecipTime <- COPrecip2_NEARBY[ COPrecip2_NEARBY$LATITUDE_NO==39.7667
& COPrecip2_NEARBY$LONGITUDE_NO==-104.88333,];
View(PrecipTime)
View(PrecipTime)
PrecipTime <- COPrecip2_NEARBY[ COPrecip2_NEARBY$LATITUDE_NO==39.7667
| COPrecip2_NEARBY$LONGITUDE_NO==-104.88333,];
View(PrecipTime)
View(PrecipTime)
PrecipTime <- COPrecip2_NEARBY[ COPrecip2_NEARBY$LATITUDE_NO==39.7667, ]
View(PrecipTime)
View(PrecipTime)
PrecipTime <- COPrecip2_NEARBY[ abs(COPrecip2_NEARBY$LATITUDE_NO - 39.7667) < 0.001, ]
PrecipTime <- COPrecip_DenverArapahoe[ abs(COPrecip_DenverArapahoe$LATITUDE_NO - 39.7667) < 0.001, ]
View(PrecipTime)
PrecipTime <- COPrecip_DenverArapahoe[
abs(COPrecip_DenverArapahoe$LATITUDE_NO - 39.7667) < 0.0001
| abs(COPrecip_DenverArapahoe$LONGITUDE_NO + 104.88333) < 0.001,];
View(PrecipTime)
format(PrecipTime$LATITUDE, digits = 15)
format(PrecipTime$LATITUDE[1], digits = 15)
format(PrecipTime$LATITUDE_NO[1], digits = 15)
format(PrecipTime$LATITUDE_NO[1], digits = 20)
format(PrecipTime$LONGITUDE_NO[1], digits = 20)
format(PrecipTime$LONGITUDE_NO[1], digits = 18)
PrecipS.points <- SpatialPoints(c(-104.88333, 39.76667), proj4string = CRS(wgs.84));
PrecipTime <- COPrecip_DenverArapahoe[
abs(COPrecip_DenverArapahoe$LATITUDE_NO - 39.7667) < 0.0001
| abs(COPrecip_DenverArapahoe$LONGITUDE_NO + 104.88333) < 0.001,];
PrecipD.points <- SpatialPoints(COPrecip_DenverArapahoe[, c("LONGITUDE_NO","LATITUDE_NO")],
proj4string = CRS(wgs.84));
PrecipS.points <- SpatialPoints(PrecipTime[, c("LONGITUDE_NO","LATITUDE_NO")],
proj4string = CRS(wgs.84));
PrecipN.points <- SpatialPoints(COPrecip2_NEARBY[, c("LONGITUDE_NO","LATITUDE_NO")],
proj4string = CRS(wgs.84));
Surf.points <- SpatialPoints(COSurfaceH2O[, c("LONGITUDE_NO","LATITUDE_NO")],
proj4string = CRS(wgs.84));
svg("ColoradoPrecipitationSurfaceWater.svg", width = 14, height = 10);
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41),
xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado",
sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
points(Surf.points, pch = 2, col = "blue");
points(PrecipD.points, pch = 2, col = "red");
points(PrecipS.points, pch = 18, col = "dark red");
points(PrecipN.points, pch = 2, col = "orange");
dev.off();
svg("ColoradoPrecipitationSurfaceWater.svg", width = 14, height = 10);
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41),
xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado",
sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
points(Surf.points, pch = 2, col = "blue");
points(PrecipD.points, pch = 2, col = "red");
points(PrecipS.points, pch = 18, col = "yellow");
points(PrecipN.points, pch = 2, col = "orange");
dev.off();
svg("ColoradoPrecipitationSurfaceWater.svg", width = 14, height = 10);
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41),
xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado",
sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
points(Surf.points, pch = 2, col = "blue");
points(PrecipD.points, pch = 2, col = "red");
points(PrecipS.points, pch = 18, col = "yellow");
points(PrecipN.points, pch = 2, col = "dark orange");
dev.off();
svg("ColoradoPrecipitationSurfaceWater.svg", width = 14, height = 10);
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41),
xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado",
sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
points(Surf.points, pch = 2, col = "blue");
points(PrecipD.points, pch = 2, col = "red");
points(PrecipS.points, pch = 18, col = "dark yellow");
points(PrecipN.points, pch = 2, col = "dark orange");
dev.off();
svg("ColoradoPrecipitationSurfaceWater.svg", width = 14, height = 10);
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41),
xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado",
sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
points(Surf.points, pch = 2, col = "blue");
points(PrecipD.points, pch = 2, col = "red");
points(PrecipS.points, pch = 18, col = "light red");
points(PrecipN.points, pch = 2, col = "orange");
dev.off();
svg("ColoradoPrecipitationSurfaceWater.svg", width = 14, height = 10);
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41),
xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado",
sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
points(Surf.points, pch = 2, col = "blue");
points(PrecipD.points, pch = 2, col = "red");
points(PrecipS.points, pch = 18, col = "dark red");
points(PrecipN.points, pch = 2, col = "orange");
dev.off();
svg("ColoradoPrecipitationSurfaceWater.svg", width = 14, height = 10);
plot(USstates, xlim = range(-109,-102), ylim = range(37, 41),
xlab = "longitude (deg)", ylab = "latitude (deg)", main = "Colorado",
sub = "Surface Water (blue) & Precipitation (red/orange) Measurement Locations");
points(Surf.points, pch = 2, col = "blue");
points(PrecipD.points, pch = 2, col = "red");
points(PrecipS.points, pch = 3, col = "dark red");
points(PrecipN.points, pch = 2, col = "orange");
dev.off();
plot(x = PrecipTime$DATE, y = PrecipTime$HPCP)
plot(x = PrecipTime$DATE, y = PrecipTime$HPCP, xlim = range("1990-01-01", "1995-01-01"))
PrecipTime$DATE[12000,]
PrecipTime$DATE[12000]
PrecipTime$DATE[13000]
plot(x = PrecipTime$DATE, y = PrecipTime$HPCP, xlim = range("1992-01-15 01:00:00 EST",
"1994-11-03 05:00:00 EST"))
plot(x = PrecipTime$DATE, y = PrecipTime$HPCP, xlim = range(as.Date("1992-01-15 01:00:00 EST"),
as.Date("1994-11-03 05:00:00 EST")))
plot(x = PrecipTime$DATE, y = PrecipTime$HPCP, xlim = range(as.Date("1992-01-15"),
as.Date("1994-11-03")))
summary(PrecipTime)
PrecipTime <- PrecipTime[ PrecipTime$HPCP < 99999, ]
summary(PrecipTime)
which(max(PrecipTime$HPCP))
which(max(PrecipTime[PrecipTime$HPCP,]))
which(max(PrecipTime[PrecipTime$HPCP,]))
df = PrecipTime
df[which(df$HPCP == max(df$HPCP)), ]
PrecipTime[which(PrecipTime$HPCP == max(PrecipTime$HPCP),]$DATE
PrecipTime[which(PrecipTime$HPCP == max(PrecipTime$HPCP),]
PrecipTime[which(PrecipTime$HPCP == max(PrecipTime$HPCP)),]$DATE
rainDate <- PrecipTime[which(PrecipTime$HPCP == max(PrecipTime$HPCP)),]$DATE;
class(rainDate)
COSurfaceH2O[which( difftime(COSurfaceH2O$peak_begin_date2, rainDate)<0),]
COSurfaceH2O[which( difftime(COSurfaceH2O$peak_begin_date2, rainDate)>0),]
difftime(COSurfaceH2O$peak_begin_date2[1], rainDate)
COSurfaceH2O[which( abs(difftime(COSurfaceH2O$peak_begin_date2, rainDate))<5),]
nearRainDate <- COSurfaceH2O[which( abs(difftime(COSurfaceH2O$peak_begin_date2, rainDate))<5),]
View(nearRainDate
)
rainDate
COSurfaceH2O[COSurfaceH2O$gw_count_nu!='0',]
COSurfaceH2O[COSurfaceH2O$gw_count_nu=='0',]
COSurfaceH2O[!COSurfaceH2O$gw_count_nu=='0',]
COSurfaceH2O[!COSurfaceH2O$qw_count_nu=='0',]
COSurfaceH2O[!COSurfaceH2O$peak_count_nu=='0',]
rainDate
SPlatteSurface <- read.csv(file = sprintf("%s%s", dDir, "SPLATTE_SURFACE_LEVEL.csv"),
head = T, sep = "\t", stringsAsFactors = F);
SPlatteSurface <- read.csv(file = sprintf("%s%s", dDir, "SPLATTE_SURFACE_LEVEL.csv"),
head = T, sep = "\t", stringsAsFactors = F, skip = 31);
View(SPlatteSurface)
char_SPlatteSurface <- SPlatteSurface[1,];
test <- SPlatteSurface[2:,]
test <- SPlatteSurface[2-,]
test <- SPlatteSurface[2-nrow(SPlatteSurface),]
max(PrecipTime$DATE)
max(!is.na(PrecipTime$DATE))
nearRainDate <- COSurfaceH2O[which( abs(difftime(COSurfaceH2O$peak_begin_date2, rainDate))>5000),]
View(nearRainDate)
View(nearRainDate)
View(SPlatteSurface)
View(SPlatteSurface)
SPlatteSurface <- SPlatteSurface[2-(nrow(SPlatteSurface)-1),]; # Removing character column
View(SPlatteSurface)
View(SPlatteSurface)
View(SPlatteSurface)
View(SPlatteSurface)
View(test)
View(test)
SPlatteSurface <- read.csv(file = sprintf("%s%s", dDir, "SPLATTE_SURFACE_LEVEL.csv"),
head = T, sep = "\t", stringsAsFactors = F, skip = 31);
# Removing and saving line with length of each column
char_SPlatteSurface <- SPlatteSurface[1,]; # Saving character column
SPlatteSurface <- SPlatteSurface[2:(nrow(SPlatteSurface)-1),]; # Removing character column
View(SPlatteSurface)
View(SPlatteSurface)
SPlatteSurface <- read.csv(file = sprintf("%s%s", dDir, "SPLATTE_SURFACE_LEVEL.csv"),
head = F, sep = "\t", stringsAsFactors = F, skip = 33);
# Removing and saving line with length of each column
View(SPlatteSurface)
View(SPlatteSurface)
namesSP <- read.csv(file = sprintf("%s%s", dDir, "SPLATTE_SURFACE_LEVEL.csv"),
head = T, sep = "\t", stringsAsFactors = F, skip = 31);
names(namesSP)
names(SPlatteSurface) <- names(namesSP)
View(SPlatteSurface)
str(SPlatteSurface)
SPlatteSurface$datetime <- strptime( SPlatteSurface$datetime, "%Y%m%d %H:%M");
str(SPlatteSurface)
SPlatteSurface <- read.csv(file = sprintf("%s%s", dDir, "SPLATTE_SURFACE_LEVEL.csv"),
head = F, sep = "\t", stringsAsFactors = F, skip = 33);
namesSP <- read.csv(file = sprintf("%s%s", dDir, "SPLATTE_SURFACE_LEVEL.csv"),
head = T, sep = "\t", stringsAsFactors = F, skip = 31);
names(SPlatteSurface) <- names(namesSP);
test <- SPlatteSurface
test$datetime
test$datetime[1]
class(test$datetime[1])
strptime(x = "2007-10-01 00:00", format = "%Y-%m-%d %H:%M")
names(SPlatteSurface) <- names(namesSP);
SPlatteSurface$datetime <- strptime(SPlatteSurface$datetime, "%Y-%m-%d %H:%M");
View(SPlatteSurface)
SPlatteSurface <- read.csv(file = sprintf("%s%s", dDir, "SPLATTE_SURFACE_LEVEL.csv"),
head = F, sep = "\t", stringsAsFactors = F, skip = 33);
View(SPlatteSurface)
namesSP <- read.csv(file = sprintf("%s%s", dDir, "SPLATTE_SURFACE_LEVEL.csv"),
head = T, sep = "\t", stringsAsFactors = F, skip = 31);
names(SPlatteSurface) <- names(namesSP);
View(SPlatteSurface)
SPlatteSurface <- read.csv(file = sprintf("%s%s", dDir, "SPLATTE_SURFACE_LEVEL.csv"),
head = F, sep = "\t", stringsAsFactors = F, skip = 33);
View(SPlatteSurface)
View(SPlatteSurface)
namesSP <- read.csv(file = sprintf("%s%s", dDir, "SPLATTE_SURFACE_LEVEL.csv"),
head = T, sep = "\t", stringsAsFactors = F, skip = 31);
View(namesSP)
names(SPlatteSurface) <- names(namesSP);
SPlatteSurface$datetime <- strptime(SPlatteSurface$datetime, "%Y-%m-%d %H:%M");
View(SPlatteSurface)
plot(SPlatteSurface$datetime, SPlatteSurface$X02_00060)
View(t1)
View(t22)
COSurfaceH2O[which( COSurfaceH2O$site_no==06711565),]
COSurfaceH2O[which( COSurfaceH2O$site_no=="06711565"),]
COSurfaceH2O[which( COSurfaceH2O$site_no=="06711565"),]$LATITUDE_NO
COPrecip_DenverArapahoe[which(COPrecip_DenverArapahoe$LATITUDE_NO==COSurfaceH2O[which( COSurfaceH2O$site_no=="06711565"),]$LATITUDE_NO),]
plot(SPlatteSurface$datetime, SPlatteSurface$X02_00060, xlim = range(as.Date("2013-01-01"),as.Date("2013-12-31"))
)
SPlatteSurface$datetime[250000,]
SPlatteSurface$datetime[250000]
SPlatteSurface$datetime[240000]
SPlatteSurface$datetime[200000]
SPlatteSurface$datetime[180000]
SPlatteSurface$datetime[190000]
SPlatteSurface$datetime[185000]
SPlatteSurface$datetime[184500]
SPlatteSurface$datetime[183500]
SPlatteSurface$datetime[182500]
SPlatteSurface$datetime[182100]
SPlatteSurface$datetime[182200]
SPlatteSurface$datetime[182300]
SPlatteSurface$datetime[182350]
SPlatteSurface$datetime[182450]
SPlatteSurface$datetime[182400]
SPlatteSurface$datetime[182425]
SPlatteSurface$datetime[182429]
SPlatteSurface$datetime[182432]
SPlatteSurface$datetime[182433]
SPlatteSurface$datetime[182440]
SPlatteSurface$datetime[182441]
SPlatteSurface$datetime[192441]
SPlatteSurface$datetime[195441]
SPlatteSurface$datetime[199441]
SPlatteSurface$datetime[120441]
SPlatteSurface$datetime[200441]
SPlatteSurface$datetime[210441]
SPlatteSurface$datetime[220441]
SPlatteSurface$datetime[220000]
SPlatteSurface$datetime[219000]
SPlatteSurface$datetime[218000]
SPlatteSurface$datetime[217000]
SPlatteSurface$datetime[217500]
SPlatteSurface$datetime[217450]
SPlatteSurface$datetime[217455]
SPlatteSurface$datetime[217475]
SPlatteSurface$datetime[217465]
SPlatteSurface$datetime[217468]
SPlatteSurface$datetime[217473]
SPlatteSurface$datetime[217471]
plot( SPlatteSurface$datetime, SPlatteSurface$X02_00060,
xlim = range(SPlatteSurface$datetime[182441],SPlatteSurface$datetime[217471]))
SPlatteSurface$datetime[182441]
class(SPlatteSurface$datetime[182441])
plot( SPlatteSurface$datetime, SPlatteSurface$X02_00060,
xlim = range(SPlatteSurface$datetime[182441], SPlatteSurface$datetime[217471]) )
rainDate <- PrecipTime[which(PrecipTime$HPCP == max(PrecipTime$HPCP)),]$DATE;
plot( SPlatteSurface$datetime, SPlatteSurface$X02_00060,
xlim = range(as.Date(SPlatteSurface$datetime[182441]),
as.Date(SPlatteSurface$datetime[217471])) )
plot( SPlatteSurface$datetime, SPlatteSurface$X02_00060)
plot( SPlatteSurface$datetime, SPlatteSurface$X02_00060, ylab = "Discharge (ft3/s)")
plot( SPlatteSurface$datetime, SPlatteSurface$X02_00060, ylab = "Discharge (ft3/s)", xlab = "date")
plot( SPlatteSurface$datetime, SPlatteSurface$X02_00060, ylab = "Discharge (ft3/s)", xlab = "Date")
dev.off()
dev.off();
dev.off();
plot( SPlatteSurface$datetime, SPlatteSurface$X02_00060, ylab = "Discharge (ft3/s)", xlab = "Date")
test <- PrecipTime[!is.na(PrecipTime$DATE),]
max(test$DATE
)
dev.off();
svg("SPlatte_SurfaceWater.svg", width = 14, height = 10);
plot( SPlatteSurface$datetime, SPlatteSurface$X02_00060, ylab = "Discharge (ft3/s)", xlab = "Date");
dev.off()
